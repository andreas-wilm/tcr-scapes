root <- '../OxRetrieve/Data/processed'
comb <-read.csv(paste(root,'/combined_deduplicated_clean.csv',sep=""))
figa
# Plot length by database
s<-30
s2<-15
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
figa<-comb %>%
ggplot(aes(x=factor(pairing),fill=dataset))+
geom_bar(stat="count", width=0.7,color='black',alpha=0.5)+
ylab("\nN (000's)\n")+
labs(fill='Source:') +xlab('\nChain Pairing\n')+theme_classic()+
scale_y_continuous(labels = function(x) x/1000)+
theme(axis.text = element_text(size = s2),
legend.text = element_text(size=s2),
legend.title = element_text(size=s2),
axis.title = element_text(size=s2),
legend.position="top"
)+
guides(fill=guide_legend(title="Dataset"))+
scale_fill_manual(values=cbPalette)
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("scales")
install.packages("pastecs")
plot_decoys<-function(df,yvar,title){
s1<-12
yvar<-ensym(yvar)
df<-data_summary(df,yvar,c('epitope','Model','N_olga'))
df$low<-df$f1.score-df$sd
df$high<-df$f1.score+df$sd
p<-df %>%
ggplot(aes(x=epitope, y= f1.score,fill=as.factor(N_olga)),colour='black')+
geom_bar(stat='identity',position='dodge')+
geom_errorbar(aes(ymin=low-sd, ymax=high+sd), width=.2,
position=position_dodge(.9))+
facet_wrap('Model',nrow=2)+
labs(x=NULL,y=NULL,title=title)+
ylim(0,1)+
theme_classic()+
guides(fill=guide_legend(title='# Synthetic TCRs',ncol=1))+
scale_y_continuous(labels = percent,limits=c(0,1),breaks=c(0,0.5,1))+
scale_fill_manual(values=c('#A4B8DDFF','#0E2037FF'))+
theme(plot.title=element_text(size=s1,hjust=0.5),
axis.title.x =element_text(size=s1),
axis.title.y=element_text(size=s1),
axis.text.y=element_text(size=s1),
legend.position='right',
axis.text.x=element_text(size=s1,angle=90))
return(p)
}
# library(plyr)
olga_eps <-get_time(get_files('../OLGA/','eps'))
get_time<-function(df){
t<-lapply(str_split(trimws(gsub("[^0-9.]",' ',df$Runtime)),' '),as.double)
df$runtime<-lapply(lapply(lapply(t,str_rep),sum),'[[',1)
df$time<-as.numeric(df$runtime)
return(df)
}
plot_decoys<-function(df,yvar,title){
s1<-12
yvar<-ensym(yvar)
df<-data_summary(df,yvar,c('epitope','Model','N_olga'))
df$low<-df$f1.score-df$sd
df$high<-df$f1.score+df$sd
p<-df %>%
ggplot(aes(x=epitope, y= f1.score,fill=as.factor(N_olga)),colour='black')+
geom_bar(stat='identity',position='dodge')+
geom_errorbar(aes(ymin=low-sd, ymax=high+sd), width=.2,
position=position_dodge(.9))+
facet_wrap('Model',nrow=2)+
labs(x=NULL,y=NULL,title=title)+
ylim(0,1)+
theme_classic()+
guides(fill=guide_legend(title='# Synthetic TCRs',ncol=1))+
scale_y_continuous(labels = percent,limits=c(0,1),breaks=c(0,0.5,1))+
scale_fill_manual(values=c('#A4B8DDFF','#0E2037FF'))+
theme(plot.title=element_text(size=s1,hjust=0.5),
axis.title.x =element_text(size=s1),
axis.title.y=element_text(size=s1),
axis.text.y=element_text(size=s1),
legend.position='right',
axis.text.x=element_text(size=s1,angle=90))
return(p)
}
# library(plyr)
olga_eps <-get_time(get_files('../OLGA/','eps'))
# Figure 1: Global model performance
# Load in results files
get_files<-function(directory_path, file){
d<-data.frame()
expts<-lapply(str_split(list.dirs(directory_path),'/'),'[',4)
expts<-expts[!is.na(expts)]
for (e in expts){
dx<-read.csv(paste(directory_path, e, paste('/',file,'.csv',sep=''),sep='/'))
d<-rbind(d,dx)
}
return(d)
}
# Combine matrix and clustering times for TCRdist
str_rep<-function(str){
return(replace(str,is.na(str),0))
}
get_time<-function(df){
t<-lapply(str_split(trimws(gsub("[^0-9.]",' ',df$Runtime)),' '),as.double)
df$runtime<-lapply(lapply(lapply(t,str_rep),sum),'[[',1)
df$time<-as.numeric(df$runtime)
return(df)
}
ds <-get_time(get_files('../Downsampling/','total'))
getcwd()
get_cwd()
get_cw()
getcw()
getcd()
getwd()
setwd("~/Documents/Academic/Oxford/Oxford_DPhil/DPhil/Software/ClustOx/results_publication/stats")
rm(list=ls())
library(ggplot2)
library(tidyverse)
library("scales")
library(reshape2)
library(ggpubr)
library(tidyr)
library(tidyverse)
library(paletteer)
# Figure 1: Global model performance
# Load in results files
get_files<-function(directory_path, file){
d<-data.frame()
expts<-lapply(str_split(list.dirs(directory_path),'/'),'[',4)
expts<-expts[!is.na(expts)]
for (e in expts){
dx<-read.csv(paste(directory_path, e, paste('/',file,'.csv',sep=''),sep='/'))
d<-rbind(d,dx)
}
return(d)
}
# Combine matrix and clustering times for TCRdist
str_rep<-function(str){
return(replace(str,is.na(str),0))
}
get_time<-function(df){
t<-lapply(str_split(trimws(gsub("[^0-9.]",' ',df$Runtime)),' '),as.double)
df$runtime<-lapply(lapply(lapply(t,str_rep),sum),'[[',1)
df$time<-as.numeric(df$runtime)
return(df)
}
ds <-get_time(get_files('../Downsampling/','total'))
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
plot_decoys<-function(df,yvar,title){
s1<-12
yvar<-ensym(yvar)
df<-data_summary(df,yvar,c('epitope','Model','N_olga'))
df$low<-df$f1.score-df$sd
df$high<-df$f1.score+df$sd
p<-df %>%
ggplot(aes(x=epitope, y= f1.score,fill=as.factor(N_olga)),colour='black')+
geom_bar(stat='identity',position='dodge')+
geom_errorbar(aes(ymin=low-sd, ymax=high+sd), width=.2,
position=position_dodge(.9))+
facet_wrap('Model',nrow=2)+
labs(x=NULL,y=NULL,title=title)+
ylim(0,1)+
theme_classic()+
guides(fill=guide_legend(title='# synthetic TCRs',ncol=1))+
scale_y_continuous(labels = percent,limits=c(0,1),breaks=c(0,0.5,1))+
scale_fill_manual(values=c('#A4B8DDFF','#0E2037FF'))+
theme(plot.title=element_text(size=s1,hjust=0.5),
axis.title.x =element_text(size=s1),
axis.title.y=element_text(size=s1),
axis.text.y=element_text(size=s1),
legend.position='right',
axis.text.x=element_text(size=s1,angle=90))
return(p)
}
# library(plyr)
olga_eps <-get_time(get_files('../OLGA/','eps'))
olga_eps<-subset(olga_eps, (olga_eps$N_olga%in%c(0,10000))&(olga_eps$epitope!='DECOY'))
plot_decoys(olga_eps,'f1.score','F1-score\n')
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
plot_runtime<-function(df,var,hide_legend=FALSE){
s1=14
s2=10
df<-data_summary(df,'time',c(var,'Model'))
var<-ensym(var)
df$low<-df$time-df$sd
df$high<-df$time+df$sd
p<-df %>%
# ggplot(aes(x=!!var,y=logtime,colour=Model))+
ggplot(aes(x=!!var,y=time,colour=Model))+
geom_line()+
geom_point(size=1)+
# geom_pointrange(aes(ymin=time-sd, ymax=time+sd), position=position_dodge(.9))+
geom_errorbar(aes(ymin=low, ymax=high))+
scale_colour_manual(values=cbPalette,
breaks= c('clustcr','gliph2','GIANA','ismart','tcrdist3','hamming','length','random'))+
labs(x='# Synthetic TCRs (1000s)',y='Runtime (s)\n',fill=NULL)+
scale_y_continuous(trans='log10', breaks = c(0.01,1,100),labels=c('0.01','1','100'))+
scale_x_continuous(labels = function(x) x/1000)+
theme_classic()+
theme(legend.title=element_text(size=s1),
legend.text=element_text(size=s1),
legend.position='right')+
guides(fill=guide_legend(title='Model',ncol=1))+
theme(plot.title=element_text(size=s1),
axis.title.x =element_text(size=s1),
axis.title.y=element_text(size=s1),
axis.text.y=element_text(size=s1),
axis.text.x=element_text(size=s1))
if (hide_legend==TRUE){
p<-p+theme(legend.position="none")
}
return(p)
}
# detach(package:plyr)
olga<-get_time(get_files('../OLGA/','total'))
plot_runtime(olga,'N_olga')
p<-df %>%
# ggplot(aes(x=!!var,y=logtime,colour=Model))+
ggplot(aes(x=!!var,y=time,colour=Model))+
geom_line()+
geom_point(size=1)+
# geom_pointrange(aes(ymin=time-sd, ymax=time+sd), position=position_dodge(.9))+
geom_errorbar(aes(ymin=low, ymax=high))+
scale_colour_manual(values=cbPalette,
breaks= c('clustcr','gliph2','GIANA','ismart','tcrdist3','hamming','length','random'))+
labs(x='\n# Synthetic TCRs (1000s)',y='Runtime (s)\n',fill=NULL)+
scale_y_continuous(trans='log10', breaks = c(0.01,1,100),labels=c('0.01','1','100'))+
scale_x_continuous(labels = function(x) x/1000)+
theme_classic()+
theme(legend.title=element_text(size=s1),
legend.text=element_text(size=s1),
legend.position='right')+
guides(fill=guide_legend(title='Model',ncol=1))+
theme(plot.title=element_text(size=s1),
axis.title.x =element_text(size=s1),
axis.title.y=element_text(size=s1),
axis.text.y=element_text(size=s1),
axis.text.x=element_text(size=s1))
plot_runtime<-function(df,var,hide_legend=FALSE){
s1=14
s2=10
df<-data_summary(df,'time',c(var,'Model'))
var<-ensym(var)
df$low<-df$time-df$sd
df$high<-df$time+df$sd
p<-df %>%
# ggplot(aes(x=!!var,y=logtime,colour=Model))+
ggplot(aes(x=!!var,y=time,colour=Model))+
geom_line()+
geom_point(size=1)+
# geom_pointrange(aes(ymin=time-sd, ymax=time+sd), position=position_dodge(.9))+
geom_errorbar(aes(ymin=low, ymax=high))+
scale_colour_manual(values=cbPalette,
breaks= c('clustcr','gliph2','GIANA','ismart','tcrdist3','hamming','length','random'))+
labs(x='\n# Synthetic TCRs (1000s)',y='Runtime (s)\n',fill=NULL)+
scale_y_continuous(trans='log10', breaks = c(0.01,1,100),labels=c('0.01','1','100'))+
scale_x_continuous(labels = function(x) x/1000)+
theme_classic()+
theme(legend.title=element_text(size=s1),
legend.text=element_text(size=s1),
legend.position='right')+
guides(fill=guide_legend(title='Model',ncol=1))+
theme(plot.title=element_text(size=s1),
axis.title.x =element_text(size=s1),
axis.title.y=element_text(size=s1),
axis.text.y=element_text(size=s1),
axis.text.x=element_text(size=s1))
if (hide_legend==TRUE){
p<-p+theme(legend.position="none")
}
return(p)
}
# detach(package:plyr)
olga<-get_time(get_files('../OLGA/','total'))
plot_runtime(olga,'N_olga')
# Plot F1 score as a function of N_decoys
plot_decoys<-function(df,yvar,title){
s1<-12
yvar<-ensym(yvar)
df<-data_summary(df,yvar,c('epitope','Model','N_olga'))
df$low<-df$f1.score-df$sd
df$high<-df$f1.score+df$sd
p<-df %>%
ggplot(aes(x=epitope, y= f1.score,fill=as.factor(N_olga)),colour='black')+
geom_bar(stat='identity',position='dodge')+
geom_errorbar(aes(ymin=low-sd, ymax=high+sd), width=.2,
position=position_dodge(.9))+
facet_wrap('Model',nrow=2)+
labs(x=NULL,y=NULL,title=title)+
ylim(0,1)+
theme_classic()+
guides(fill=guide_legend(title='# synthetic TCRs',ncol=1))+
scale_y_continuous(labels = percent,limits=c(0,1),breaks=c(0,0.5,1))+
scale_fill_manual(values=c('#A4B8DDFF','#0E2037FF'))+
theme(plot.title=element_text(size=s1,hjust=0.5),
axis.title.x =element_text(size=s1),
axis.title.y=element_text(size=s1),
axis.text.y=element_text(size=s1),
legend.position='right',
axis.text.x=element_text(size=s1,angle=90))
return(p)
}
# library(plyr)
olga_eps <-get_time(get_files('../OLGA/','eps'))
olga_eps<-subset(olga_eps, (olga_eps$N_olga%in%c(0,10000))&(olga_eps$epitope!='DECOY'))
plot_decoys(olga_eps,'f1.score','F1-score\n')
plot_decoys<-function(df,yvar,title){
s1<-12
yvar<-ensym(yvar)
df<-data_summary(df,yvar,c('epitope','Model','N_olga'))
df$low<-df$f1.score-df$sd
df$high<-df$f1.score+df$sd
p<-df %>%
ggplot(aes(x=epitope, y= f1.score,fill=as.factor(N_olga)),colour='black')+
geom_bar(stat='identity',position='dodge')+
geom_errorbar(aes(ymin=low-sd, ymax=high+sd), width=.2,
position=position_dodge(.9))+
facet_wrap('Model',nrow=2)+
labs(x=NULL,y=NULL,title=title)+
ylim(0,1)+
theme_classic()+
guides(fill=guide_legend(title='# Synthetic TCRs',ncol=1))+
scale_y_continuous(labels = percent,limits=c(0,1),breaks=c(0,0.5,1))+
scale_fill_manual(values=c('#A4B8DDFF','#0E2037FF'))+
theme(plot.title=element_text(size=s1,hjust=0.5),
axis.title.x =element_text(size=s1),
axis.title.y=element_text(size=s1),
axis.text.y=element_text(size=s1),
legend.position='right',
axis.text.x=element_text(size=s1,angle=90))
return(p)
}
plot_decoys(olga_eps,'f1.score','F1-score\n')
# Is there a correlation between metrics?
plot_metricorr<-function(res, var1,var2){
s1=14
s2=8
var1<-ensym(var1)
var2<-ensym(var2)
g1<-res%>%
ggplot(aes(x=!!var1,y=!!var2))+
geom_point()+
geom_smooth(method='lm')+
theme_classic()+
xlim(0,1.05)+
ylim(0,1.05)+
scale_y_continuous(labels = percent,limits=c(0,1),breaks=c(0,0.5,1))+
scale_x_continuous(labels = percent,limits=c(0,1),breaks=c(0,0.5,1))+
theme(plot.title=element_text(size=s1,hjust=0.5),
axis.title.x =element_text(size=s2),
axis.title.y=element_text(size=s2),
axis.text.x=element_text(size=s2),
axis.text.y=element_text(size=s2),
legend.position='right',
legend.text=element_text(size=s2))+
guides(fill=guide_legend(title=NULL,ncol=1))
return(g1)
}
res_sub<-subset(ds,!(ds$Model %in% c('random','length')))
g1 <- plot_metricorr(res_sub,'purity','f1.score')
g2 <- plot_metricorr(res_sub,'consistency','f1.score')
g3 <- plot_metricorr(res_sub,'ami','f1.score')
g4 <- plot_metricorr(res_sub,'retention','f1.score')
g5 <- plot_metricorr(res_sub,'precision','f1.score')
g6 <- plot_metricorr(res_sub,'recall','f1.score')
ggarrange(g1,g2,g3,g4,g5,g6)
